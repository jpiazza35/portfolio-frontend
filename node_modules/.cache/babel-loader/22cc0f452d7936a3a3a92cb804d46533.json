{"ast":null,"code":"var _jsxFileName = \"/Users/jpiazza/portfolio-frontend/src/components/Portfolio/Portfolio.js\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useIntersection } from \"react-use\";\nimport \"./Portfolio.css\";\nimport axios from \"axios\";\nimport { gsap } from \"gsap\";\nimport PortfolioCard from \"./PortfolioCard\";\n\nconst Portfolio = () => {\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    axios.get(\"https://jp-portfolio-backend.herokuapp.com/portfolio\").then(res => {\n      setProjects(res.data);\n    });\n  }, [setProjects]);\n  const polygon = useRef(null);\n  const textbox = useRef(null);\n  const [wasAnimated, setWasAnimated] = useState(false);\n  const polygonIntersection = useIntersection(polygon, {\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.01\n  });\n\n  function randomTimeSlide() {\n    var result = 1000 + Math.floor((4000 - 1000) * Math.random());\n    return result;\n  }\n\n  function animate() {\n    if (!wasAnimated) {\n      gsap.fromTo(polygon.current, {\n        duration: 1\n      }, {\n        scaleX: 0\n      }, {\n        scaleX: 1\n      });\n      gsap.fromTo(textbox.current, {\n        duration: 1\n      }, {\n        yPercent: 40,\n        opacity: 1\n      }, {\n        delay: 1.3,\n        yPercent: -50,\n        opacity: 1\n      });\n      setWasAnimated(true);\n    }\n  }\n\n  ;\n\n  if (polygonIntersection && polygonIntersection.isIntersecting) {\n    animate();\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"portfolio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"portfolio-intro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: polygon,\n    className: \"portfolio-intro-polygon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    ref: textbox,\n    className: \"portfolio-intro-textbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"portfolio-title main-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, \"Projects & Certifications\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"portfolio-description sub-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 15\n    }\n  }, \"Here, I will put all my projects from Git as well as my current done courses.\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"portfolio-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"portfolio-cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, projects && projects.map((project, index) => /*#__PURE__*/React.createElement(PortfolioCard, {\n    id: index,\n    project: project,\n    timeSlide: randomTimeSlide(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }))))));\n};\n\nexport default Portfolio;","map":{"version":3,"sources":["/Users/jpiazza/portfolio-frontend/src/components/Portfolio/Portfolio.js"],"names":["React","useEffect","useState","useRef","useIntersection","axios","gsap","PortfolioCard","Portfolio","projects","setProjects","get","then","res","data","polygon","textbox","wasAnimated","setWasAnimated","polygonIntersection","root","rootMargin","threshold","randomTimeSlide","result","Math","floor","random","animate","fromTo","current","duration","scaleX","yPercent","opacity","delay","isIntersecting","map","project","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useIntersection } from \"react-use\";\nimport \"./Portfolio.css\";\nimport axios from \"axios\";\nimport { gsap } from \"gsap\";\nimport PortfolioCard from \"./PortfolioCard\";\n\nconst Portfolio = () => {\n  const [projects, setProjects] = useState([]);\n  useEffect(() => {\n    axios\n      .get(\"https://jp-portfolio-backend.herokuapp.com/portfolio\")\n      .then((res) => {\n        setProjects(res.data);\n      });\n  }, [setProjects]);\n\n  const polygon = useRef(null);\n  const textbox = useRef(null);\n  const [wasAnimated, setWasAnimated] = useState(false);\n  const polygonIntersection = useIntersection(polygon,{\n    root: null,\n    rootMargin: '0px',\n    threshold: 0.01\n  });\n\n  function randomTimeSlide() {\n    var result = 1000 + Math.floor((4000 - 1000) * Math.random());\n    return result\n  }\n  function animate () {\n    if (!wasAnimated) {\n      gsap.fromTo(polygon.current, {duration:1}, { scaleX: 0 }, { scaleX: 1 });\n      gsap.fromTo(\n        textbox.current,\n      {duration:1},\n        { yPercent: 40, opacity: 1 },\n        { delay: 1.3, yPercent: -50, opacity: 1 }\n      );\n      setWasAnimated(true);\n    }\n  };\n  \n  if(polygonIntersection && polygonIntersection.isIntersecting){\n    animate();\n  }\n\n  return (\n    <>\n      <div className=\"portfolio\">\n        <div className=\"portfolio-intro\">\n          <div ref={polygon} className=\"portfolio-intro-polygon\">\n            <div ref={textbox} className=\"portfolio-intro-textbox\">\n              <h1 className=\"portfolio-title main-heading\">Projects & Certifications</h1>\n              <p className=\"portfolio-description sub-heading\">\n                Here, I will put all my projects from Git as well as my current done courses.\n              </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"portfolio-container\">\n          <div className=\"portfolio-cards\">\n           {projects &&\n              projects.map((project, index) => (\n                <PortfolioCard id={index} project={project} timeSlide={randomTimeSlide()}/>\n            ))} \n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Portfolio;\n"]},"metadata":{},"sourceType":"module"}